# Use the official docker image in all stages
image: docker:latest

# We define two stages
stages:
  - build
  - deploy

# First stage will be responsible for build our project using docker compose command
# and push builded images to gitlab repository
docker-build:
  stage: build
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker compose -f docker-compose.yml build
    - docker compose push

# Second stage will deploy our app to server using remote docker host connection.
docker-deploy:
  stage:
    deploy
  variables:
    # Setup temporary stage variable
    DOCKER_HOST: ssh://root@$SSH_SERVER:$SSH_PORT
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    # We're using tr to fix line endings which makes ed25519 keys work
    # without extra base64 encoding.
    # https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # Create `.ssh` folder if not exists
    - mkdir -p ~/.ssh

    # Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan -Hp $SSH_PORT $SSH_SERVER  >> ~/.ssh/known_hosts
    # Login on remote server to gitlab repository
    - echo "$CI_REGISTRY_PASSWORD" | docker -H $DOCKER_HOST login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # We pull our image built in `docker-build` stage. The image is downloaded one at a time due to:
    # https://github.com/docker/compose/issues/9448
    - docker compose -f docker-compose.yml pull web
    - docker compose -f docker-compose.yml up -d --remove-orphans